New Hacker Schoolers are often surprised by just how unstructured Hacker School is.  During Hacker School, participants are free to get better as programmers using whatever strategies work best for them, covering whatever topics they’re most interested in. This is a very different environment from most schools and workplaces, and it often takes time to adjust to. 

Hacker Schoolers are responsible for their own learning experiences.  While facilitators are available to support Hacker Schoolers and help them make the most of this unusual environment, we never coerce Hacker Schoolers into projects, topics, or strategies that aren’t effective or enjoyable for them.  Since ultimate responsibility to succeed lies with Hacker Schoolers, they’re also free to fail—to make little progress or be unproductive.

This post discusses four of the most common pitfalls we’ve seen Hacker Schoolers struggle with, particularly at the beginning of their batches. The goal is to help Hacker Schoolers identify when they’re in one of these failure modes and quickly fix the problem. The post doesn’t discuss solutions to these problems. For one thing, the solutions are more individualized than the problems. More importantly, we believe that it’s useful just to help people recognize and name something they may be struggling with.

The first failure mode is hiding, or not being public. By “public” I mean being visible to others in some way. This includes pairing, blogging, talking at weekly presentations, giving a small-group seminar, conducting or receiving code review, and talking on our internal chat system. Nothing at Hacker School forces you to do any of these things, but your experience will be much better if you do them. Being public allows you to learn from your peers, to discover your blind spots, and to leverage others’ experience to move faster. Being public is a prerequisite for getting feedback, and feedback is a great way to grow.

The second failure mode is too much task-switching.  It’s hard to decide what to work on. This is something that people who’ve had traditional educational experiences or traditional jobs tend to really struggle with at first. As a student, you make only a handful of decisions per semester—which classes to take, maybe which topic to write a paper about, and that’s it. All the rest is time-management, deciding which of your mandatory tasks you should do in which timeslot. Similarly, as an employee of a hierarchical company, your boss might set your priorities and your deadlines. Going from this model to one where you decide which things are most important in the absence of external deadlines is a significant change. It takes practice to master this skill.

This failure case emerges when Hacker Schoolers refuse to prioritize at all, or worry excessively about their prioritization. The results of these two attitudes are the same: constant task-switching between everything that seems even minutely important.

The Hacker Schooler who won’t prioritize at all won’t say “no” to a project—or even “not now.”  They end up with a day cut into one-hour chunks of study groups, reading, pairing, following tutorials, and working independently, all on different topics and in different languages. This is a very difficult way to make progress. Most people underestimate the cost they pay from switching contexts.

The Hacker Schooler who worries too much about their prioritization wastes cycles. They tend to doubt their prioritization the most at exactly the moment that their project gets hard. Because they’re not committed to the project, they’re less likely to seek help, more likely to tab over to Twitter when they’re stuck, and more likely to give up without learning anything interesting.

The third failure mode, impostor syndrome, is a bit more tricky.   There are three problems with impostor syndrome at Hacker School.  First, people who would be great Hacker Schoolers don’t apply because they don’t think they’ll get in. Second, Hacker Schoolers don’t try hard things, because they’re afraid they’ll fail at them and everyone will know what frauds they are.  Third, Hacker Schoolers don’t publish their work or otherwise aren’t willing to be public.

Impostor syndrome is scary.  It’s particularly harmful at Hacker School because Hacker School relies on the individual to push themselves and to take risks. As mentioned above, the Hacker School faculty won’t coerce people into tasks or projects.  If you stay in your comfort zone and only work on things you know you can succeed at, you’re removing much of the opportunity for exceptional personal growth.

The flip side of this is that Hacker School has no consequences for “failing” at a project.  You may work on something for several weeks before deciding it’s impossible, not consistent with your learning goals, or just not useful for you anymore. There’s little downside to not finishing something at Hacker School.  This is very different than most jobs, college courses, and PhD research projects, and we encourage Hacker Schoolers to take full advantage of this environment by attempting things that they aren’t sure they’ll be able to do.

A final thing that Hacker Schoolers struggle with is job-hunting. Job-hunting is not only time-consuming and distracting, it also shifts Hacker Schoolers’ motivations. Hacker School relies intensely—even to a fault—on intrinsic motivation. Job-hunting, by contrast, encourages Hacker Schoolers to start thinking about what parts of their work would be considered impressive, or how they can make their projects seem shiny. People often end up plodding through projects they don’t enjoy because they think someone, somewhere, will be impressed. In reality, it’s very hard to do great work on something you hate.

Earlier in Hacker School’s history, we told people not to think about jobs at all during Hacker School. This wasn’t a good idea either, as discussed in Mistakes We’ve Made.  Now, we try to help Hacker Schoolers strike a balance by having separate, optional interview preparation sessions outside of Hacker School’s official hours.

If you’re a Hacker Schooler who’s wrestling with one or more of these failure modes during your batch, you should know that it’s common to feel this way, and it’s also common to feel more comfortable as time passes and you experiment with different strategies. To use Kathy Sierra‘s construction, these problems are typical and temporary. Quickly recognizing when you’re in one of these failure modes and changing your habits will help you make the most of the opportunity you have before you.

Allison is a Hacker School alum and was a facilitator for over two years. She’s now a software engineer at Dropbox.

